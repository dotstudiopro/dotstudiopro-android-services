package com.dotstudioz.dotstudioPRO.corelibrary.services;

import android.content.Context;
import android.widget.Toast;

import com.dotstudioz.dotstudioPRO.corelibrary.accesstoken.AccessTokenHandler;
import com.dotstudioz.dotstudioPRO.corelibrary.constants.ApplicationConstantURL;
import com.dotstudioz.dotstudioPRO.corelibrary.constants.ApplicationConstants;
import com.dotstudioz.dotstudioPRO.corelibrary.dto.CustomFieldDTO;
import com.dotstudioz.dotstudioPRO.corelibrary.dto.SpotLightCategoriesDTO;
import com.dotstudioz.dotstudioPRO.corelibrary.dto.SpotLightChannelDTO;
import com.dotstudioz.dotstudioPRO.corelibrary.dto.VideoInfoDTO;
import com.dotstudioz.dotstudioPRO.corelibrary.util.CommonUtils;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.JsonHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import cz.msebera.android.httpclient.Header;

/**
 * Created by mohsin on 08-10-2016.
 */

public class GetLeanChannelsParameterizedService_V1 {

    private ArrayList<SpotLightCategoriesDTO> spotLightCategoriesDTOList;
    private ArrayList<SpotLightCategoriesDTO> spotLightCategoriesDTOListForSliderShowcase;

    private HashSet channelDTOList;
    private HashSet channelDTOListForSliderShowcase;

    public IGetLeanChannelsParameterizedService_V1 iGetLeanChannelsParameterizedService_V1;

    public GetLeanChannelsParameterizedService_V1(Context ctx) {
        if (ctx instanceof GetLeanChannelsParameterizedService_V1.IGetLeanChannelsParameterizedService_V1)
            iGetLeanChannelsParameterizedService_V1 = (GetLeanChannelsParameterizedService_V1.IGetLeanChannelsParameterizedService_V1) ctx;
        else
            throw new RuntimeException(ctx.toString()+ " must implement IGetLeanChannelsParameterizedService_V1");
    }


    public void getAllLeanChannelsForCategoriesService(String xAccessToken, String API_URL, final String categorySlug, ArrayList categoriesList, HashSet channelsSet) {
        AsyncHttpClient client = new AsyncHttpClient();
        client.setMaxRetriesAndTimeout(2, 30000);
        client.setTimeout(30000);
        client.addHeader("x-access-token", ApplicationConstants.xAccessToken);

        Map<String, String> jsonParams = new HashMap<String, String>();

        //If the category slug is slider-showcase, then fetch all the channel data
        //If it is not slider-showcase, then fetch only the lean data
        if (!categorySlug.equals("slider-showcase")) {
            jsonParams.put("detail", "lean");
            spotLightCategoriesDTOList = categoriesList;
            channelDTOList = channelsSet;
        } else {
            spotLightCategoriesDTOListForSliderShowcase = categoriesList;
            channelDTOListForSliderShowcase = channelsSet;
        }

        RequestParams rp = new RequestParams(jsonParams);

        /*System.out.println("CHANNEL API CALL:-" + ApplicationConstantURL.getInstance().CHANNELS);
        System.out.println("CHANNEL API X-ACCESS-TOKEN:-" + ApplicationConstants.xAccessToken);
        System.out.println("CHANNEL API PARAMETERS:-" + rp.toString());*/

        //Using the below variable as a counter to make a callback after all the api calls are
        //completed
        //numberOfCategoriesToFetch++;

        iGetLeanChannelsParameterizedService_V1.showProgress("Loading");
        try {
            //System.out.println("ApplicationConstantURL.getInstance().CHANNELS+categorySlug:-" + ApplicationConstantURL.getInstance().CHANNELS + categorySlug);
            client.get(API_URL + categorySlug, rp, new JsonHttpResponseHandler() {
                @Override
                public void onSuccess(int statusCode, Header[] headers, JSONObject responseBody) {
                    //System.out.println("CHANNEL fetchSpotLightHomePageChannels ONSUCCESS:-" + responseBody.toString());

                    boolean isSuccess = true;
                    try {
                        isSuccess = responseBody.getBoolean("success");
                    } catch (JSONException e) {
                        //throws error, because on success there is no boolean returned, so
                        // we are assuming that it is a success
                        isSuccess = true;
                    }

                    if (isSuccess) {
                        //Respective result handlers for API calls based on lean or not
                        if (!categorySlug.equals("slider-showcase")) {
                            //fetchSpotLightHomePageChannelsHelper(responseBody);
                            resultProcessingForLeanChannels(responseBody);
                        } else {
                            //fetchSpotLightHomePageChannelsHelperForSliderShowcase(responseBody);
                            resultProcessingForLeanChannelsForSliderShowcase(responseBody);
                        }
                    } else {
                        if(AccessTokenHandler.getInstance().handleTokenExpiryConditions(responseBody)) {
                            AccessTokenHandler.getInstance().setFlagWhileCalingForToken(AccessTokenHandler.getInstance().fetchTokenCalledInCategoriesPageString);
                            if(AccessTokenHandler.getInstance().foundAnyError)
                                iGetLeanChannelsParameterizedService_V1.accessTokenExpired();
                        }
                    }
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, String error, Throwable throwable) {
                    System.out.println("FETCHING fetchSpotLightHomePageChannels ONFAILURE:-"+ApplicationConstantURL.getInstance().CHANNELS + categorySlug);
                    System.out.println("FETCHING fetchSpotLightHomePageChannels ONFAILURE:-" + error);
                    iGetLeanChannelsParameterizedService_V1.hidePDialog();
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, Throwable error, JSONObject responseBody) {
                    iGetLeanChannelsParameterizedService_V1.hidePDialog();
                    if (responseBody != null) {
                        System.out.println("CHANNEL fetchSpotLightHomePageChannels ONFAILURE:-"+responseBody.toString());
                        System.out.println("CHANNEL fetchSpotLightHomePageChannels ONFAILURE:-" + error.getMessage());

                        boolean isSuccess = true;
                        try {
                            isSuccess = responseBody.getBoolean("success");
                        } catch (JSONException e) {
                            //throws error, because on success there is no boolean returned, so
                            // we are assuming that it is a success
                            isSuccess = true;
                        }

                        if (!isSuccess) {
                            if(AccessTokenHandler.getInstance().handleTokenExpiryConditions(responseBody)) {
                                AccessTokenHandler.getInstance().setFlagWhileCalingForToken(AccessTokenHandler.getInstance().fetchTokenCalledInCategoriesPageString);
                                if(AccessTokenHandler.getInstance().foundAnyError)
                                    iGetLeanChannelsParameterizedService_V1.accessTokenExpired();
                            }
                        }
                    }
                }
            });
        } catch (Exception e) {
            iGetLeanChannelsParameterizedService_V1.hidePDialog();
        }
    }

    private JSONArray channelsArray;
    private void resultProcessingForLeanChannels(JSONObject response) {

        JSONObject obj = response;

        try {
            //channelsArray = obj.getJSONObject("data").getJSONArray("channels");
            channelsArray = obj.getJSONArray("channels");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        for (int i = 0; i < channelsArray.length(); i++) {
            try {
                JSONObject channel = channelsArray.getJSONObject(i);
                SpotLightChannelDTO spotLightChannelDTO = new SpotLightChannelDTO();
                spotLightChannelDTO.setId(channel.getString("_id"));

                spotLightChannelDTO.setTitle(channel.getString("title"));
                try {
                    try {
                        if(channel.has("poster")) {
                            String imageString = channel.getString("poster");
                            spotLightChannelDTO.setPoster(imageString);
                        }
                    } catch (JSONException e) {
                        spotLightChannelDTO.setPoster("");
                    }

                    String imageString = "";
                    try {
                        imageString = channel.getString("image");
                    } catch (JSONException e) {
                        imageString = channel.getString("poster");
                    }

                    if(imageString.length() == 0) {
                        try {
                            imageString = channel.getString("spotlight_poster");
                        } catch (JSONException e) {
                            imageString = channel.getString("videos_thumb");
                        }
                    }

                    imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                    spotLightChannelDTO.setImage(imageString);
                } catch (JSONException e) {
                    spotLightChannelDTO.setImage("");
                    System.out.println("NO POSTER FOR:-" + channel.getString("_id"));
                    //e.printStackTrace();
                }
                try {
                    if(channel.has("poster")) {
                        String imageString = channel.getString("poster");
                        spotLightChannelDTO.setPoster(imageString);
                    }
                } catch (JSONException e) {
                    spotLightChannelDTO.setPoster("");
                }
                try {
                    String imageString = channel.getString("spotlight_poster");
                    imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                    spotLightChannelDTO.setSpotlightImage(imageString);
                } catch (JSONException e) {
                    try {
                        String imageString = channel.getString("videos_thumb");
                        imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                        spotLightChannelDTO.setSpotlightImage(imageString);
                    } catch (JSONException ee) {
                        spotLightChannelDTO.setSpotlightImage("");
                    }
                    //e.printStackTrace();
                }

                try {
                    spotLightChannelDTO.setLink(channel.getString("link"));
                } catch (JSONException e) {
                    spotLightChannelDTO.setLink(channel.getString("channel_url"));
                }
                spotLightChannelDTO.setSlug(channel.getString("slug"));

                try {
                    spotLightChannelDTO.setChannelLogo(channel.getString("channel_logo"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setYear(channel.getString("year"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setLanguage(channel.getString("language"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setChannelRating(channel.getString("rating"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setCompany(channel.getString("company").toUpperCase());
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setSpotlight_company_id(channel.getString("spotlight_company_id"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setCountry(channel.getString("country"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setChannelDescription(channel.getString("description"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }

                JSONArray categoriesArray = channel.getJSONArray("categories");
                for (int j = 0; j < categoriesArray.length(); j++) {
                    spotLightChannelDTO.getCategories().add(categoriesArray.getJSONObject(j).getString("_id"));

                    for (int k = 0; k < spotLightCategoriesDTOList.size(); k++) {
                        if (categoriesArray.getJSONObject(j).getString("_id").equals(spotLightCategoriesDTOList.get(k).getCategoryValue())) {
                            boolean flagToCheckIfChannelAlreadyAdded = false;
                            for(int l = 0; l < spotLightCategoriesDTOList.get(k).getSpotLightChannelDTOList().size(); l++) {
                                if(spotLightCategoriesDTOList.get(k).getSpotLightChannelDTOList().get(l).getId().equals(spotLightChannelDTO.getId()))
                                    flagToCheckIfChannelAlreadyAdded = true;
                            }
                            if(!flagToCheckIfChannelAlreadyAdded)
                                spotLightCategoriesDTOList.get(k).getSpotLightChannelDTOList().add(spotLightChannelDTO);
                        }
                    }
                }


                boolean isChildChannelPresent = false;
                JSONArray childChannelsArray = new JSONArray();
                try {
                    childChannelsArray = channel.getJSONArray("childchannels");
                    //childChannelsArray = channel.getJSONArray("playlist");
                } catch (JSONException e) {
                    //e.printStackTrace();
                }
                if (childChannelsArray.length() > 0)
                    isChildChannelPresent = true;

                boolean isVideo = false;
                boolean isPlaylist = false;

                if(!isChildChannelPresent) {
                    try {
                        try {
                            if (channel.has("video_id")) {
                                if (channel.getString("video_id") != null && channel.getString("video_id").length() > 0) {
                                    isVideo = true;
                                    isChildChannelPresent = false;
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if (!isVideo) {
                            try {
                                if (channel.has("video")) {
                                    if (channel.getJSONObject("video").has("_id")) {
                                        if (channel.getJSONObject("video").getString("_id") != null && channel.getJSONObject("video").getString("_id").length() > 0) {
                                            isVideo = true;
                                            isChildChannelPresent = false;
                                        }
                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }

                        if (ApplicationConstants.CHANNEL_TYPE_FULL) {
                            try {
                                JSONArray playlistArray = channel.getJSONArray("playlist");
                                if(playlistArray.length() > 0) {
                                    isPlaylist = true;
                                    isChildChannelPresent = false;
                                }
                            } catch (JSONException e) { }
                        } else if (ApplicationConstants.CHANNEL_TYPE_LEAN) {
                            try {
                                String playlistID = channel.getString("playlist_id");
                                if (playlistID.trim().length() > 0) {
                                    isPlaylist = true;
                                    isChildChannelPresent = false;
                                }
                            } catch (JSONException e) { }
                        }

                        if (!isVideo && !isPlaylist) {
                            isChildChannelPresent = true;
                        }
                    } catch (Exception e) { }
                }

                if (!isChildChannelPresent) {
                    if (ApplicationConstants.CHANNEL_TYPE_FULL) {
                        try {
                            spotLightChannelDTO.setVideo(channel.getString("video_id"));
                            isVideo = true;
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if (!isVideo) {
                            try {
                                spotLightChannelDTO.setVideo(channel.getJSONObject("video").getString("_id"));
                                isVideo = true;
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    } else if (ApplicationConstants.CHANNEL_TYPE_LEAN) {
                        try {
                            spotLightChannelDTO.setVideo(channel.getString("video_id"));
                            isVideo = true;
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if (!isVideo) {
                            try {
                                //spotLightChannelDTO.setVideo(channel.getString("video_id"));
                                spotLightChannelDTO.setVideo(channel.getJSONObject("video").getString("_id"));
                                isVideo = true;
                            } catch (JSONException e) {
                                //e.printStackTrace();
                            }
                        }
                    }

                    if (!isVideo) {
                        if (ApplicationConstants.CHANNEL_TYPE_FULL) {
                            try {
                                JSONArray playlistArray = channel.getJSONArray("playlist");
                                for (int j = 0; j < playlistArray.length(); j++) {
                                    if (playlistArray.getJSONObject(j).getString("_id").length() > 0)
                                        spotLightChannelDTO.getPlaylist().add(playlistArray.getJSONObject(j).getString("_id"));
                                }
                                isPlaylist = true;
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        } else if (ApplicationConstants.CHANNEL_TYPE_LEAN) {
                            try {
                                String playlistID = channel.getString("playlist_id");
                                if (playlistID.trim().length() > 0) {
                                    spotLightChannelDTO.getPlaylist().add(playlistID);
                                    isPlaylist = true;
                                }
                            } catch (JSONException e) {
                                //e.printStackTrace();
                            }
                        }

                        if (ApplicationConstants.CHANNEL_TYPE_LEAN && !isVideo && !isPlaylist) {
                            spotLightChannelDTO.setIsSeasonsPresent(true);
                        }
                    }

                    channelDTOList.add(spotLightChannelDTO);
                } else {
                    spotLightChannelDTO.setIsSeasonsPresent(true);
                    if(childChannelsArray != null && childChannelsArray.length() > 0) {
                        spotLightChannelDTO.setNumberOfSeasons(childChannelsArray.length());
                        for (int c = 0; c < childChannelsArray.length(); c++) {
                            JSONObject childChannel = childChannelsArray.getJSONObject(c);
                            SpotLightChannelDTO childSpotLightChannelDTO = new SpotLightChannelDTO();
                            if (childChannel.getJSONArray("playlist").length() > 0) {
                                childSpotLightChannelDTO.setId(childChannel.getJSONObject("video").getString("_id"));
                                childSpotLightChannelDTO.setCompany(childChannel.getString("company").toUpperCase());
                                try {
                                    String imageString = childChannel.getString("videos_thumb");
                                    imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                                    childSpotLightChannelDTO.setImage(imageString);
                                } catch (JSONException e) {
                                    childSpotLightChannelDTO.setImage("");
                                    e.printStackTrace();
                                }

                                childSpotLightChannelDTO.setTitle(childChannel.getString("title"));
                                try {
                                    String imageString = childChannel.getString("spotlight_poster");
                                    imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                                    childSpotLightChannelDTO.setSpotlightImage(imageString);
                                } catch (JSONException e) {
                                    childSpotLightChannelDTO.setSpotlightImage("");
                                    e.printStackTrace();
                                }
                                childSpotLightChannelDTO.setSlug(childChannel.getString("slug"));
                                try {
                                    JSONArray playlistArray = childChannel.getJSONArray("playlist");
                                    for (int j = 0; j < playlistArray.length(); j++) {
                                        if (playlistArray.getJSONObject(j).getString("_id").length() > 0)
                                            childSpotLightChannelDTO.getPlaylist().add(playlistArray.getJSONObject(j).getString("_id"));
                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }
                            spotLightChannelDTO.getSeasonsList().add(childSpotLightChannelDTO);
                        }
                    }
                    channelDTOList.add(spotLightChannelDTO);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        iGetLeanChannelsParameterizedService_V1.

        numberOfCategoriesAlreadyFetched++;

        requestForFetchingAChannelCompleted();

        iGetLeanChannelsParameterizedService_V1.getAllCategoriesServiceResponse(
                spotLightCategoriesDTOList,
                spotLightCategoriesDTOListForSliderShowcase,
                spotLightCategoriesDTOListForRoster,
                spotLightCategoriesDTOListForGenre
        );
    }

    private JSONArray channelsArrayForSliderShowcase;
    private void resultProcessingForLeanChannelsForSliderShowcase(JSONObject response) {
        JSONObject obj = response;

        try {
            channelsArrayForSliderShowcase = obj.getJSONArray("channels");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        channelDTOListForSliderShowcase = new HashSet<SpotLightChannelDTO>();
        for (int i = 0; i < channelsArrayForSliderShowcase.length(); i++) {
            try {
                JSONObject channel = channelsArrayForSliderShowcase.getJSONObject(i);
                SpotLightChannelDTO spotLightChannelDTO = new SpotLightChannelDTO();
                spotLightChannelDTO.setId(channel.getString("_id"));

                spotLightChannelDTO.setTitle(channel.getString("title"));
                try {
                    String imageString = "";
                    try {
                        imageString = channel.getString("image");
                    } catch (JSONException e) {
                        imageString = channel.getString("poster");
                    }

                    if(imageString.length() == 0) {
                        try {
                            imageString = channel.getString("spotlight_poster");
                        } catch (JSONException e) {
                            imageString = channel.getString("videos_thumb");
                        }
                    }

                    imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                    spotLightChannelDTO.setImage(imageString);
                } catch (JSONException e) {
                    spotLightChannelDTO.setImage("");
                    System.out.println("NO POSTER FOR:-" + channel.getString("_id"));
                    //e.printStackTrace();
                }
                try {
                    String imageString = channel.getString("spotlight_poster");
                    imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                    spotLightChannelDTO.setSpotlightImage(imageString);
                } catch (JSONException e) {
                    try {
                        String imageString = channel.getString("videos_thumb");
                        imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                        spotLightChannelDTO.setSpotlightImage(imageString);
                    } catch (JSONException ee) {
                        spotLightChannelDTO.setSpotlightImage("");
                    }
                    //e.printStackTrace();
                }

                try {
                    spotLightChannelDTO.setLink(channel.getString("link"));
                } catch (JSONException e) {
                    spotLightChannelDTO.setLink(channel.getString("channel_url"));
                }
                spotLightChannelDTO.setSlug(channel.getString("slug"));

                try {
                    spotLightChannelDTO.setChannelLogo(channel.getString("channel_logo"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setYear(channel.getString("year"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setLanguage(channel.getString("language"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setChannelRating(channel.getString("rating"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setCompany(channel.getString("company").toUpperCase());
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setSpotlight_company_id(channel.getString("spotlight_company_id"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setCountry(channel.getString("country"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }
                try {
                    spotLightChannelDTO.setChannelDescription(channel.getString("description"));
                } catch (JSONException e) { /*e.printStackTrace();*/ }

                JSONArray categoriesArray = channel.getJSONArray("categories");
                for (int j = 0; j < categoriesArray.length(); j++) {
                    spotLightChannelDTO.getCategories().add(categoriesArray.getJSONObject(j).getString("_id"));

                    for (int k = 0; k < spotLightCategoriesDTOListForSliderShowcase.size(); k++) {
                        if (categoriesArray.getJSONObject(j).getString("_id").equals(spotLightCategoriesDTOListForSliderShowcase.get(k).getCategoryValue())) {
                            spotLightCategoriesDTOListForSliderShowcase.get(k).getSpotLightChannelDTOList().add(spotLightChannelDTO);
                        }
                    }
                }


                boolean isChildChannelPresent = false;
                JSONArray childChannelsArray = new JSONArray();
                try {
                    childChannelsArray = channel.getJSONArray("childchannels");
                    //childChannelsArray = channel.getJSONArray("playlist");
                } catch (JSONException e) {
                    //e.printStackTrace();
                }
                if (childChannelsArray.length() > 0)
                    isChildChannelPresent = true;

                if (!isChildChannelPresent) {

                    boolean isVideo = false;
                    boolean isPlaylist = false;

                    if (channel.getJSONArray("playlist").length() == 0) {
                        try {
                            spotLightChannelDTO.setVideo(channel.getString("video_id"));
                            isVideo = true;
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        if (!isVideo) {
                            try {
                                spotLightChannelDTO.setVideo(channel.getJSONObject("video").getString("_id"));
                                isVideo = true;
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    }


                    if (!isVideo) {
                        try {
                            JSONArray playlistArray = channel.getJSONArray("playlist");
                            for (int j = 0; j < playlistArray.length(); j++) {
                                if (playlistArray.getJSONObject(j).getString("_id").length() > 0) {
                                    if (playlistArray.getJSONObject(j).has("_id"))
                                        spotLightChannelDTO.getPlaylist().add(playlistArray.getJSONObject(j).getString("_id"));
                                    if (playlistArray.getJSONObject(j).has("company_id"))
                                        spotLightChannelDTO.getVideoCompanyIdList().add(playlistArray.getJSONObject(j).getString("company_id"));

                                    VideoInfoDTO videoInfoDTO = new VideoInfoDTO();
                                    if(playlistArray.getJSONObject(j).has("_id"))
                                        videoInfoDTO.setVideoID(playlistArray.getJSONObject(j).getString("_id"));
                                    if(playlistArray.getJSONObject(j).has("company_id"))
                                        videoInfoDTO.setCompanyId(playlistArray.getJSONObject(j).getString("company_id"));
                                    if(playlistArray.getJSONObject(j).has("title"))
                                        videoInfoDTO.setVideoTitle(playlistArray.getJSONObject(j).getString("title"));
                                    if(playlistArray.getJSONObject(j).has("poster"))
                                        videoInfoDTO.setPoster(playlistArray.getJSONObject(j).getString("poster"));
                                    if(playlistArray.getJSONObject(j).has("description"))
                                        videoInfoDTO.setDescription(playlistArray.getJSONObject(j).getString("description"));
                                    if(playlistArray.getJSONObject(j).has("thumb"))
                                        videoInfoDTO.setThumb("https://images.dotstudiopro.com/"+playlistArray.getJSONObject(j).getString("thumb"));

                                    try {
                                        if(playlistArray.getJSONObject(j).has("custom_fields")) {
                                            for(int p = 0; p < playlistArray.getJSONObject(j).getJSONArray("custom_fields").length(); p++) {
                                                CustomFieldDTO customFieldDTO = new CustomFieldDTO();
                                                JSONObject customFieldJSONObject = (JSONObject) playlistArray.getJSONObject(j).getJSONArray("custom_fields").get(p);
                                                if(customFieldJSONObject.has("field_title") && customFieldJSONObject.has("field_value")) {
                                                    customFieldDTO.setCustomFieldName(customFieldJSONObject.getString("field_title"));
                                                    customFieldDTO.setCustomFieldValue(customFieldJSONObject.getString("field_value"));
                                                    videoInfoDTO.getCustomFieldsArrayList().add(customFieldDTO);
                                                }
                                            }
                                        }
                                    } catch(Exception e) {
                                        e.printStackTrace();
                                    }

                                    videoInfoDTOArrayListForSliderShowcase.add(videoInfoDTO);
                                }
                            }
                            isPlaylist = true;
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        /*try {
                            JSONArray playlistArray = channel.getJSONArray("playlist");
                            for (int j = 0; j < playlistxArray.length(); j++) {
                                if (playlistArray.getJSONObject(j).getString("_id").length() > 0)
                                    spotLightChannelDTO.getPlaylist().add(playlistArray.getJSONObject(j).getString("_id"));
                            }
                            isPlaylist = true;
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }*/


                        if (ApplicationConstants.CHANNEL_TYPE_LEAN && !isVideo && !isPlaylist) {
                            spotLightChannelDTO.setIsSeasonsPresent(true);
                        }
                    }
                    channelDTOListForSliderShowcase.add(spotLightChannelDTO);
                } else {
                    spotLightChannelDTO.setIsSeasonsPresent(true);
                    spotLightChannelDTO.setNumberOfSeasons(childChannelsArray.length());
                    for (int c = 0; c < childChannelsArray.length(); c++) {
                        JSONObject childChannel = childChannelsArray.getJSONObject(c);
                        SpotLightChannelDTO childSpotLightChannelDTO = new SpotLightChannelDTO();
                        if (childChannel.getJSONArray("playlist").length() > 0) {
                            childSpotLightChannelDTO.setId(childChannel.getJSONObject("video").getString("_id"));
                            childSpotLightChannelDTO.setCompany(childChannel.getString("company").toUpperCase());
                            try {
                                String imageString = childChannel.getString("videos_thumb");
                                imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                                childSpotLightChannelDTO.setImage(imageString);
                            } catch (JSONException e) {
                                childSpotLightChannelDTO.setImage("");
                                e.printStackTrace();
                            }

                            childSpotLightChannelDTO.setTitle(childChannel.getString("title"));
                            try {
                                String imageString = childChannel.getString("spotlight_poster");
                                imageString = CommonUtils.replaceDotstudioproWithMyspotlightForImage(imageString);
                                childSpotLightChannelDTO.setSpotlightImage(imageString);
                            } catch (JSONException e) {
                                childSpotLightChannelDTO.setSpotlightImage("");
                                e.printStackTrace();
                            }
                            childSpotLightChannelDTO.setSlug(childChannel.getString("slug"));
                            try {
                                JSONArray playlistArray = childChannel.getJSONArray("playlist");
                                for (int j = 0; j < playlistArray.length(); j++) {
                                    if (playlistArray.getJSONObject(j).getString("_id").length() > 0)
                                        childSpotLightChannelDTO.getPlaylist().add(playlistArray.getJSONObject(j).getString("_id"));
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                        spotLightChannelDTO.getSeasonsList().add(childSpotLightChannelDTO);
                    }
                    channelDTOListForSliderShowcase.add(spotLightChannelDTO);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        numberOfCategoriesAlreadyFetched++;

        try {
            if (numberOfCategoriesAlreadyFetched == numberOfCategoriesToFetch) {
                numberOfCategoriesAlreadyFetched = 0;
                numberOfCategoriesToFetch = 0;
                //fetchCompleteListOfCategories();
                fetchPlaylistForSliderShowCase();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        iGetAllCategoriesService_V1.getAllCategoriesServiceResponse(
                spotLightCategoriesDTOList,
                spotLightCategoriesDTOListForSliderShowcase,
                spotLightCategoriesDTOListForRoster,
                spotLightCategoriesDTOListForGenre
        );
    }


    public interface IGetLeanChannelsParameterizedService_V1 {
        void showProgress(String message);
        void hidePDialog();
        void getLeanChannels
        void getAllCategoriesServiceResponse(
                ArrayList<SpotLightCategoriesDTO> spotLightCategoriesDTOList,
                ArrayList<SpotLightCategoriesDTO> spotLightCategoriesDTOListForSliderShowcase,
                ArrayList<SpotLightCategoriesDTO> spotLightCategoriesDTOListForRoster,
                ArrayList<SpotLightCategoriesDTO> spotLightCategoriesDTOListForGenre
        );
        void getAllCategoriesError(String ERROR);
        void accessTokenExpired();
    }
}
